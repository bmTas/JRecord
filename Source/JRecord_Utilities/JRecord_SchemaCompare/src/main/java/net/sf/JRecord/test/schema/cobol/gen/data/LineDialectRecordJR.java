package net.sf.JRecord.test.schema.cobol.gen.data;

 /*
  * *------------- Keep this notice in your final code ---------------
  * *   This code was generated by JRecord projects CodeGen program
  * *            on the: 13 Jul 2016 9:24:26 
  * *     from Copybook: JR_Schema_Test.cbl
  * *          Template: lineWrapper
  * *             Split: 01   
  * * File Organization: 0   
  * *              Font: 
  * *   
  * *    CodeGen Author: Bruce Martin
  * *-----------------------------------------------------------------
  *
  *   This Code should not be changed you should, either:
  *   * Rerun CodeGen to regenerate it 
  *   * Fix CodeGen and rerun CodeGen
  *
  *   Please supply any program fixes/enhancements/documentation
  *   back to the JRecord project (https://sourceforge.net/projects/jrecord/)
  *   so other people can benefit !!!
  * 
  *
  *          Bruce Martin (JRecord / CodeGen Author) 
  *
  * ------------------------------------------------------------------
  * v01  CodeGen        13 Jul 2016  Initial version
  *     (Bruce Martin)
  */


import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.Details.IGetByteData;
import net.sf.JRecord.Details.Line;

public class LineDialectRecordJR implements IGetByteData {
    
    private AbstractLine line; 

    private static FieldNamesJrSchemaTest.RecordDialectRecord fn
                   = FieldNamesJrSchemaTest.RECORD_DIALECT_RECORD;

        

    public short getRecordType() {
        return (short) line.getFieldValue(fn.recordType).asInt();                                 
    }
    
    public void setRecordType(short value) {
        this.line.getFieldValue(fn.recordType).set(value);
    }

    public short getDialectCode() {
        return (short) line.getFieldValue(fn.dialectCode).asInt();                                 
    }
    
    public void setDialectCode(short value) {
        this.line.getFieldValue(fn.dialectCode).set(value);
    }

    public String getDialectName() {
        return line.getFieldValue(fn.dialectName).asString();
    }
    
    public void setDialectName(String value) {
        this.line.getFieldValue(fn.dialectName).set(value);
    }

    public String getFontName() {
        return line.getFieldValue(fn.fontName).asString();
    }
    
    public void setFontName(String value) {
        this.line.getFieldValue(fn.fontName).set(value);
    }

    public String getHasBinaryFields() {
        return line.getFieldValue(fn.hasBinaryFields).asString();
    }
    
    public void setHasBinaryFields(String value) {
        this.line.getFieldValue(fn.hasBinaryFields).set(value);
    }

    public String getIsBinary() {
        return line.getFieldValue(fn.isBinary).asString();
    }
    
    public void setIsBinary(String value) {
        this.line.getFieldValue(fn.isBinary).set(value);
    }

    public short getFileStructure() {
        return (short) line.getFieldValue(fn.fileStructure).asInt();                                 
    }
    
    public void setFileStructure(short value) {
        this.line.getFieldValue(fn.fileStructure).set(value);
    }


	


    @Override
    public byte[] getData() {
        return line.getData();  
    }

    @Override
    public void setData(byte[] data) {

        if (line instanceof Line) {
            ((Line) line).setData(data);
        } else {
            throw new RuntimeException("Invalid line for setdata");
        }
    }
    
    public LineDialectRecordJR setLine(AbstractLine l) {
    	line = l;
    	return this;
    }
    
    public AbstractLine getLine() {
        return line;
    }
}

