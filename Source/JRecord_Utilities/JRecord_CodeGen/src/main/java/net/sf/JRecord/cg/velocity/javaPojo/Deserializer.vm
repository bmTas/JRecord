package ${generateOptions.packageId}.io;
#incl("schema/CommentSchema.pvm")

import net.sf.JRecord.cgen.def.IDeserializer;

import ${generateOptions.packageId}.schema.Schema${generateOptions.schemaDefinition.extensionName};
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()}) 
import ${generateOptions.packageId}.data.Line${r.extensionName}JR;
##import ${generateOptions.packageId}.definitions.I${r.extensionName};
#*  *##end



/**
 * This class coverts an array of bytes to a Line${currentRecord.extensionName}JR
 */  
public class Deserializer${generateOptions.schemaDefinition.extensionName} {

    private final Schema${generateOptions.schemaDefinition.extensionName} schema${generateOptions.schemaDefinition.extensionName};

   /**
    * This class coverts an array of bytes to a Line record
    */  
    public Deserializer${generateOptions.schemaDefinition.extensionName} (Schema${generateOptions.schemaDefinition.extensionName} schema${generateOptions.schemaDefinition.extensionName}) {
        this.schema${generateOptions.schemaDefinition.extensionName} = schema${generateOptions.schemaDefinition.extensionName};        
    }
 
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()}) 
    public final IDeserializer<Line${r.extensionName}JR> deserializer${r.extensionName}JR = new IDeserializer<Line${r.extensionName}JR>() {  
        @Override public Line${r.extensionName}JR deserialize(byte[] data) {
            Line${r.extensionName}JR l = new Line${r.extensionName}JR(schema${generateOptions.schemaDefinition.extensionName}.record${r.extensionName});
            l.setData(data);
            return l;                                   
        }
    };    
#*  *##end    
}

