package ${generateOptions.packageId}.example;
##  
##   Write Example JRecord with Schema-Fields
##
##   Author: Bruce Martin
##
#incl("schema/CommentExample.pvm")

import java.io.IOException;

import net.sf.JRecord.cgen.def.IWriter;

#*  *##set( $r = ${generateOptions.schemaDefinition.getRecords().get(0)})                                                            
import ${generateOptions.packageId}.definitions.I${r.extensionName};
import ${generateOptions.packageId}.definitions.I${r.extensionName}Pojo;
import ${generateOptions.packageId}.io.IOBuilder${generateOptions.schemaDefinition.extensionName};


/**
 * Write Cobol file using a Cobol Copybook (${generateOptions.schemaDefinition.extensionName}).
 *
 * This Generated program is intended as an example of using JRecord
 * rather than a useful program (that compiles - it wont).
 * You should regard it as a starting point and modify 
 * it according to needs
 */
public final class Write${generateOptions.schemaDefinition.extensionName} {

    private String testDir        = "G:/temp/";
    private String salesFileOut   = testDir + "DTAR020out.bin";
    private String copybookName   = "${generateOptions.getSchemaDefinition().schemaName.getJavaFileName()}";                                       
    
    /**
     * Example of LineReader  classes
     */
    public Write${generateOptions.schemaDefinition.extensionName}() {
     }
    
     public void byteArrayWriter() {

        try {                                         
            IOBuilder${generateOptions.schemaDefinition.extensionName} ioBldr = new IOBuilder${generateOptions.schemaDefinition.extensionName}(copybookName);
            IWriter<I${r.extensionName}> writer = ioBldr.newWriter(salesFileOut);  
  
            writer.write(create${r.extensionName}(ioBldr.new${r.extensionName}JrLine(), data));                   

            writer.close();
        } catch (Exception e) {
             System.out.println();

            e.printStackTrace();
        }
    }
    
    public void pojoWriter() {

        try {                                         
            IOBuilder${generateOptions.schemaDefinition.extensionName} ioBldr = new IOBuilder${generateOptions.schemaDefinition.extensionName}(copybookName);
            IWriter<I${r.extensionName}> writer = ioBldr.newWriter(salesFileOut + "2");  
  
            writer.write(create${r.extensionName}(ioBldr.new${r.extensionName}PojoLine(), data));                   

            writer.close();
        } catch (Exception e) {
             System.out.println();

            e.printStackTrace();
        }
    }

 
  /*
   *   The following code contains sample assignments for every 
   * field in the Cobol File. You should modify the code to suit
   * your needs.
   *   As I do not know where the data is coming from, I have used
   * SourceOfDataForTheCobolFile instead. You should replace this with your
   * class / classes  or remove it as needed.
   *   To put it another way, it time for you to start Coding
   */
   //TODO Update as required
    private I${r.extensionName}Pojo create${r.extensionName}(I${r.extensionName}Pojo l, SourceOfDataForTheCobolFile data) 
    throws IOException {
         
#*      *##foreach($f in ${r.getFields()}) 
#*          *##if (! ${f.isArrayItem()})	
        l.set${f.extensionName}(data. ...);
#*          *##end
#*      *##end
	
#*      *##foreach($a in ${r.getArrayDetailsList()}) 
        l.set${a.getFirstElement().extensionName}(${a.getZeroArrayIndex()}, data. ...);
#*      *##end
    
        return l;
    }


    public static void main(String[] args) {
        Write${generateOptions.schemaDefinition.extensionName} w = new Write${generateOptions.schemaDefinition.extensionName}();
        
        w.byteArrayWriter();
        w.pojoWriter();
    }
}

