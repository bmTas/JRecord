package ${generateOptions.packageId}.io;
#incl("schema/CommentSchema.pvm")
#macro(schemaDef)
                    .setSplitCopybook(${generateOptions.getSplitOption().getCode()})
                    .setFileOrganization(${generateOptions.getFileStructureCode().getCode()})
                    .setDropCopybookNameFromFields(${generateOptions.isDropCopybookName()})
                    .setFont("${generateOptions.getFont()}");
#end

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.Common.Constants;
import net.sf.JRecord.External.CopybookLoader;
#*  *##if (${generateOptions.schemaDefinition.getRecords().size()} == 1)
import net.sf.JRecord.cgen.def.IDeserializer;
import net.sf.JRecord.cgen.def.IReader;
import net.sf.JRecord.cgen.def.IWriter;
import net.sf.JRecord.cgen.impl.LineDeserializer;
import net.sf.JRecord.cgen.impl.LineSerializer;
##import net.sf.JRecord.cgen.impl.PojoReaderWrapper1;
import net.sf.JRecord.cgen.impl.ReadFromBytes;
import net.sf.JRecord.cgen.impl.WriteAsBytes;
#*  *##end 

import net.sf.JRecord.def.IO.builders.IIOBuilder;
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()}) 
import ${generateOptions.packageId}.data.Line${r.extensionName}JR;
import ${generateOptions.packageId}.data.Line${r.extensionName}Pojo;
import ${generateOptions.packageId}.definitions.I${r.extensionName};
#*  *##end 

import ${generateOptions.packageId}.schema.Schema${generateOptions.schemaDefinition.extensionName};

public class IOBuilder${generateOptions.schemaDefinition.extensionName} {

    private IIOBuilder bldr;
    private final Schema${generateOptions.schemaDefinition.extensionName} schema${generateOptions.schemaDefinition.extensionName};

    public IOBuilder${generateOptions.schemaDefinition.extensionName}(String copybookFileName) throws IOException {
        bldr = JRecordInterface1.COBOL.newIOBuilder(copybookFileName)
#schemaDef
##                    .setSplitCopybook(${generateOptions.getSplitOption()})
##                    .setFileOrganization(${generateOptions.getFileStructureCode()})
##                    .setFont(${generateOptions.getFont()});
        schema${generateOptions.schemaDefinition.extensionName} = new Schema${generateOptions.schemaDefinition.extensionName}(bldr.getLayout());
    }
         
    public IOBuilder${generateOptions.schemaDefinition.extensionName}(InputStream copybook, String copybookName) throws IOException {
        bldr = JRecordInterface1.COBOL.newIOBuilder(copybook, copybookName)
#schemaDef
        schema${generateOptions.schemaDefinition.extensionName} = new Schema${generateOptions.schemaDefinition.extensionName}(bldr.getLayout());
    }

    /**
     * Create
     */
    public IOBuilder${generateOptions.schemaDefinition.extensionName}() {
        schema${generateOptions.schemaDefinition.extensionName} = new Schema${generateOptions.schemaDefinition.extensionName}();
    }
    
    
#*  *##if (${generateOptions.schemaDefinition.getRecords().size()} == 1)
#*  *##set( $r = ${generateOptions.schemaDefinition.getRecords().get(0)}) 
    public IReader<Line${r.extensionName}JR> newReader(String fileName) throws IOException {
        return newReader(new FileInputStream(fileName));
    }

    private final IDeserializer<Line${r.extensionName}JR> deserializer${r.extensionName}JR = new IDeserializer<Line${r.extensionName}JR>() {  
        @Override public Line${r.extensionName}JR deserialize(byte[] data) {
            Line${r.extensionName}JR l = new Line${r.extensionName}JR(schema${generateOptions.schemaDefinition.extensionName}.record${r.extensionName});
            l.setData(data);
            return l;                                   
        }
    };    

    public IReader<Line${r.extensionName}JR> newReader(InputStream in) throws IOException {
        return new ReadFromBytes<Line${r.extensionName}JR>(
                                schema${generateOptions.schemaDefinition.extensionName}.schema,
                                deserializer${r.extensionName}JR) 
                        .open(in);
    }


    public IReader<Line${r.extensionName}Pojo> newPojoReader(String fileName) throws IOException {
        return newPojoReader(new FileInputStream(fileName));
    }

    public IReader<Line${r.extensionName}Pojo> newPojoReader(InputStream in) throws IOException {
        return new ReadFromBytes<Line${r.extensionName}Pojo>(
                                schema${generateOptions.schemaDefinition.extensionName}.schema,
                                LineDeserializer.create(new${r.extensionName}JrLine()))
                        .open(in);
##        return PojoReaderWrapper1.newReader(schema${generateOptions.schemaDefinition.extensionName}.schema, in, new${r.extensionName}JrLine()); 
    }

    public IWriter<I${r.extensionName}> newWriter(String fileName) throws IOException {
        return newWriter(new FileOutputStream(fileName));
##        new WriteAsBytes<I${r.extensionName}>(
##                                schema${generateOptions.schemaDefinition.extensionName}.schema,
##                                new Serializer${generateOptions.schemaDefinition.extensionName}(schema${generateOptions.schemaDefinition.extensionName}))
##                        .open(fileName);
    }
    
    public IWriter<I${r.extensionName}> newWriter(OutputStream out) throws IOException {
        return 
              new WriteAsBytes<I${r.extensionName}>(
                                schema${generateOptions.schemaDefinition.extensionName}.schema,
##                                new Serializer${generateOptions.schemaDefinition.extensionName}(schema${generateOptions.schemaDefinition.extensionName})
                                LineSerializer.create(new${r.extensionName}JrLine())
                             )
                        .open(out);
    }
#*  *##else
   
    public Writer newWriter(String filename) throws IOException {
    	return newWriter(new FileOutputStream(filename));
    }
    
    public Writer${generateOptions.schemaDefinition.extensionName} newWriter(OutputStream out) throws IOException {
    	AbstractByteWriter byteWriter = ByteIOProvider.getInstance()
    					.getByteWriter(schema${generateOptions.schemaDefinition.extensionName}.schema);
    	
    	return new Writer${generateOptions.schemaDefinition.extensionName}(byteWriter, schema${generateOptions.schemaDefinition.extensionName});
    }
	
#*  *##end    
 
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()}) 
	
    public Line${r.extensionName}JR new${r.extensionName}JrLine() {
    	return new Line${r.extensionName}JR(schema${generateOptions.schemaDefinition.extensionName}.record${r.extensionName});
    }
    
    
    public Line${r.extensionName}Pojo new${r.extensionName}PojoLine() {
    	return new Line${r.extensionName}Pojo();
    }

#*  *##end    
}

