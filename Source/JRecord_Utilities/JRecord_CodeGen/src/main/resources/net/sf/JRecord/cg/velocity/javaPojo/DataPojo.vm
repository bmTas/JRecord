package ${generateOptions.packageId}.data;
#incl("schema/CommentSchema.pvm")
#macro(arrayIdx $max)
#if( $max > 0)#foreach ($i in [1 .. ${max}])[idx${i}]#end #end
#end
	
/**
 * This class is the Java representation of one record in the file
 */

#*  *##if (${currentRecord.getArrayDetailsList().size()} > 0)
import java.util.Arrays;
#*  *##end
#foreach($jc in ${currentRecord.getClassImports()})
import ${jc};
#end	
#*  *##foreach($imp in ${currentRecord.getImportList()})
import ${imp};
#*  *##end

#*  *##set ( $interfaceTxt = "")
#*  *##set ( $overide = "")
#*  *##set ( $overideSet = "")
#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/IDataPojo.vm")})
import ${generateOptions.packageId}.definitions.I${currentRecord.extensionName};
import ${generateOptions.packageId}.definitions.I${currentRecord.extensionName}Pojo;


#*      *##set ( $interfaceTxt = "implements I${currentRecord.extensionName}Pojo")
#*      *##set ( $overide = "@Override")
#*      *##set ( $overideSet = "@Override")
#*  *##elseif (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/IData.vm")})
import ${generateOptions.packageId}.definitions.I${currentRecord.extensionName};
#*      *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/IDataUpdate.vm")})
import ${generateOptions.packageId}.definitions.I${currentRecord.extensionName}Upd;
#*          *##set ( $interfaceTxt = "implements I${currentRecord.extensionName}, I${currentRecord.extensionName}Upd")
#*          *##set ( $overideSet = "@Override")
#*      *##else	
#*         *##set ( $interfaceTxt = "implements I${currentRecord.extensionName}")
#*      *##end	
#*      *##set ( $overide = "@Override")
#*  *##end
#*  *##set ( $extends = "" )
#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})
#*      *##set ( $extends = "extends Line${generateOptions.schemaDefinition.extensionName}Schema " )
#*  *##end	

public class Line${currentRecord.extensionName}Pojo ${extends}
${interfaceTxt} {

#*  *##foreach($f in ${currentRecord.getFields()}) 
#*      *##if (! ${f.isArrayItem()})	
    private ${f.getJavaType()} ${f.javaName};
#*      *##end
#*  *##end

#*  *##foreach($a in ${currentRecord.getArrayDetailsList()}) 
    private ${a.getFirstFieldDef().getJavaType()}#*
        *##foreach ($ii in [1 .. ${a.getSizes().size()}])[]#end#*
             *# ${a.getFirstElement().javaName};        
#*  *##end

## Define array size for all arrays
#*  *##foreach($a in ${currentRecord.getArrayDetailsList()}) 
    private int[] length${a.getFirstElement().extensionName} = {${a.getSizesAsString()}};
#*  *##end	
#*  *##if (${currentRecord.getArrayDetailsList().size()} > 0 || ${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})
    public Line${currentRecord.extensionName}Pojo() {
#*      *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})
#*          *##set ( $extends = "extends Line${generateOptions.schemaDefinition.extensionName}Schema " )
        super( ${generateOptions.packageId}.definitions.Defs${generateOptions.schemaDefinition.extensionName}
                      .Records.${currentRecord.constantName} );
                      
#*      *##end	
	
#*      *##if (${currentRecord.getArrayDetailsList().size()} > 0)
#*          *##foreach($aa in ${currentRecord.getArraySameSize()})
#*              *##set( $st = "")
#*              *##set( $last = ${aa.get(0).getSizes().size()} - 1)
#*              *##if( $last > 0)
#*                  *##foreach ($ii in [1 .. ${last}])
#*                      *##set( $iim1 = $ii - 1)
#*                      *##foreach($a in $aa)
#*                          *##set( $size = "length${aa.get(0).getFirstElement().extensionName}[${iim1}]")
        ${st}${a.getFirstElement().javaName} #arrayIdx(${iim1}) = new ${a.getFirstFieldDef().getJavaType()}#foreach ($i in [$ii ..${a.getSizes().size()}])[${size}]#set($size = "")#end ;       	
#*                      *##end#*
#*                      *##set( $iim1 = $ii - 1)
        ${st}for (int idx${ii} = 0;idx${ii} < length${aa.get(0).getFirstElement().extensionName}[${iim1}]; idx${ii}++) {
#*                      *##set( $st = "${st}    ")
#*                  *##end
#*              *##end
#*              *##foreach($a in ${aa})
        ${st}${a.getFirstElement().javaName} #arrayIdx(${last}) = new ${a.getFirstFieldDef().getJavaType()}[length${aa.get(0).getFirstElement().extensionName}[${last}]];       	
#*              *##end
#*              *##foreach($a in ${aa})
#*                  *##if (${a.getFirstFieldDef().getJavaType()} == "short")
        ${st}Arrays.fill(${a.getFirstElement().javaName} #arrayIdx(${last}), (short) ${a.getFirstFieldDef().getFieldInitialise()});      	
#*                 *##else
        ${st}Arrays.fill(${a.getFirstElement().javaName} #arrayIdx(${last}), ${a.getFirstFieldDef().getFieldInitialise()});      	
#*                 *##end
#*              *##end
#*              *##if( $last > 0)
        #foreach($ii in [1 .. ${last}])}#end
#*              *##end

#*          *##end
#*      *##end

    }
#*  *##end


#*  *##foreach($f in ${currentRecord.getFields()}) 
#*      *##if (! ${f.isArrayItem()})
    ${overide}
    public ${f.getJavaType()} get${f.extensionName}() {
        return ${f.javaName};
    }
    
    ${overideSet}
    public void set${f.extensionName}(${f.getJavaType()} value) {
        this.${f.javaName} = value;
## Add calling array size setters to change array shape if the array depends on this field for its size 
#*          *##foreach($a in ${currentRecord.getArrayDetailsList()}) 
#*              *##if ( ${a.getFirstFieldDef().getDependingOn()} && ${a.getFirstFieldDef().getDependingOn().getFieldDetail().getName()} == ${f.getFieldDetail().getName()}  ) 
        // ${a.getFirstFieldDef().getFieldDetail().getName()} DEPENDS ON ${a.getFirstFieldDef().getDependingOn().getFieldDetail().getName()}
        set${a.getFirstElement().extensionName}ArrayLength(0, value);
#*              *##end
#*         *##end
    }

#*      *##end
#*  *##end

#*  *##foreach($a in ${currentRecord.getArrayDetailsList()}) 
    ${overide}
    public ${a.getFirstFieldDef().getJavaType()}  get${a.getFirstElement().extensionName}(${a.getIndexParameters()}) {
        return ${a.getFirstElement().javaName}${a.getArrayAccessParameters()};
    }
  
    ${overideSet}
    public void set${a.getFirstElement().extensionName}(${a.getIndexParameters()}, ${a.getFirstFieldDef().getJavaType()} value) {
        ${a.getFirstElement().javaName}${a.getArrayAccessParameters()} = value;
    }

#*  *##end



## Generate getters for array sizes
#*  *##foreach($a in ${currentRecord.getArrayDetailsList()}) 
    public int get${a.getFirstElement().extensionName}ArrayLength(int indexNumber) {
        return length${a.getFirstElement().extensionName}[indexNumber];
    }
#*  *##end

## Generate setters for array sizes, support 1D and 2D arrays 
## Support for "DEPENDS ON"
    // Allow resizing of the array for "DEPENDS ON" support
#*  *##foreach($aa in ${currentRecord.getArrayDetailsList()})
#*    *##set( $st = "")
#*    *##set( $last = ${aa.getSizes().size()} - 1)
    public void set${aa.getFirstElement().extensionName}ArrayLength(int indexNumber, int size) {
        length${aa.getFirstElement().extensionName}[indexNumber] = size;
#*    *##if( $last > 0)
#*      *##foreach ($ii in [1 .. ${last}])
#*        *##set( $iim1 = $ii - 1)
#*        *##set( $iim1 = $ii - 1)
        ${st}// Catering for 2D Array
        ${aa.getFirstElement().javaName} = new ${aa.getFirstFieldDef().getJavaType()}[size][];
        ${st}for (int idx${ii} = 0;idx${ii} < length${aa.getFirstElement().extensionName}[${iim1}]; idx${ii}++) {
        ${st}   ${aa.getFirstElement().javaName}[idx${ii}] = new ${aa.getFirstFieldDef().getJavaType()}[length${aa.getFirstElement().extensionName}[1]];
#*        *##if (${aa.getFirstFieldDef().getJavaType()} == "short")
        ${st}   Arrays.fill(${aa.getFirstElement().javaName} [idx${ii}] ,  (short) ${aa.getFirstFieldDef().getFieldInitialise()});      	
#*        *##else
        ${st}   Arrays.fill(${aa.getFirstElement().javaName} [idx${ii}] , ${aa.getFirstFieldDef().getFieldInitialise()});      	
#*        *##end
        }
#*        *##set( $st = "${st}    ")
#*      *##end
#*    *##else
        ${aa.getFirstElement().javaName} = new ${aa.getFirstFieldDef().getJavaType()}[size];
#*      *##if (${aa.getFirstFieldDef().getJavaType()} == "short")
        Arrays.fill(${aa.getFirstElement().javaName}, (short) ${aa.getFirstFieldDef().getFieldInitialise()});      	
#*      *##else
        Arrays.fill(${aa.getFirstElement().javaName}, ${aa.getFirstFieldDef().getFieldInitialise()});      	
#*      *##end
#*    *##end
   
    }
#*  *##end


#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/Code.vm")})
	
    public void set(I${currentRecord.extensionName} value) {
        Code${generateOptions.schemaDefinition.extensionName}
            .assign${currentRecord.extensionName}(
                this, value);
    }
#*  *##else
#*      *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/IDataPojo.vm")})	
    public void set(I${currentRecord.extensionName} pojo) {
#*         *##foreach($f in ${currentRecord.getFields()}) 
#*             *##if (! ${f.isArrayItem()})
       ${f.javaName} = pojo.get${f.extensionName}();
#*             *##end   
#*         *##end    
    
#*         *##foreach($as in ${currentRecord.getArraySameSize()}) 
#*             *##set($n = "from.get${as.get(0).getFirstElement().extensionName}ArrayLength")
${as.get(0).getForLoops("pojo.get${as.get(0).getFirstElement().extensionName}")}    
#*             *##foreach($a in ${as}) 
           ${a.getFirstElement().javaName}[${a.getCallIndexParameters()}] = pojo.get${a.getFirstElement().extensionName}(${a.getCallIndexParameters()});
#*             *##end
${as.get(0).getEndForLoops()}    
#*         *##end    
    }
#*     *##end     
#*  *##end	
#*  *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/DataSchema.vm")})	
	
	public Line${currentRecord.extensionName}Pojo as${currentRecord.extensionName}() {
	    return this;
	}
#*  *##end	

}
