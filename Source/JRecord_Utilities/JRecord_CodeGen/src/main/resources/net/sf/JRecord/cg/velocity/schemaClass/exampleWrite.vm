package ${packageId};
##  
##   Write Example JRecord with Schema-Fields
##
##   Author: Bruce Martin
##
#incl("schema/CommentExample.pvm")

import java.io.IOException;

import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.Details.AbstractLine;
#IoBldrImport()

import net.sf.JRecord.IO.AbstractLineWriter;

#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})                     
import ${generateOptions.packageId}.schema.Record${r.extensionName};
#*  *##end
import ${generateOptions.packageId}.schema.Schema${generateOptions.schemaDefinition.extensionName};


/**
 * Write Cobol file using a Cobol Copybook (${generateOptions.schemaDefinition.extensionName}).
 *
 * This Generated program is intended as an example of using JRecord
 * rather than a useful program (that compiles - it wont).
 * You should regard it as a starting point and modify 
 * it according to needs
 */
public final class Write${generateOptions.schemaDefinition.extensionName} {

    private String testDir        = "G:/temp/";
    private String salesFileOut   = testDir + "DTAR020out.bin";
    private String copybookName   = "${generateOptions.getSchemaDefinition().schemaName.getJavaFileName()}"; 

#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})                     
    private Record${r.extensionName} r${r.extensionName};
#*  *##end                                           
    
    /**
     * Example of LineReader  classes
     */
    public Write${generateOptions.schemaDefinition.extensionName}() {
        super();

        try {
#incl("schema/DclIOBuilder.pvm")      
            Schema${generateOptions.schemaDefinition.extensionName} schema${generateOptions.schemaDefinition.extensionName}
                    = new Schema${generateOptions.schemaDefinition.extensionName}(iob.getLayout()); 
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})                     
            r${r.extensionName} = schema${generateOptions.schemaDefinition.extensionName}.record${r.extensionName};
#*  *##end                                           
            AbstractLineWriter writer = iob.newWriter(salesFileOut);
 
#*  *##set( $sep = "        ")    
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()}) 
            writer.write(create${r.extensionName}(iob, data));
#*  *##end                       

            writer.close();
        } catch (Exception e) {
             System.out.println();

            e.printStackTrace();
        }
    }


  /*
   *   The following code contains sample assignments for every 
   * field in the Cobol File. You should modify the code to suit
   * your needs.
   *   As I do not know where the data is coming from, I have used
   * SourceOfDataForTheCobolFile instead. You should replace this with your
   * class / classes  or remove it as needed.
   *   To put it another way, it time for you to start Coding
   */

#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()}) 
    private AbstractLine create${r.extensionName}(${ioBldr} iob, SourceOfDataForTheCobolFile data) 
    throws IOException {
        AbstractLine l = iob.newLine();    
        
#*      *##foreach($f in ${r.getFields()}) 
#*          *##if (! ${f.isArrayItem()})	
        l.getFieldValue(r${r.extensionName}.fld${f.extensionName}).set(data. ...);
#*          *##end
#*      *##end
	
#*      *##foreach($a in ${r.getArrayDetailsList()}) 
        l.getFieldValue(r${r.extensionName}.array${a.getFirstElement().extensionName}.get(${a.getZeroArrayIndex()})).set(data. ...);
#*      *##end
    
        return l;
    }

#*  *##end
    public static void main(String[] args) {
        new Write${generateOptions.schemaDefinition.extensionName}();
    }
}

