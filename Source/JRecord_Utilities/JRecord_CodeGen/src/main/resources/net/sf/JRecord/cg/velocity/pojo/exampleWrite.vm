package ${packageId};
##
##   Write Example JRecord with Generated class
##
##   Author: Bruce Martin
##
#incl("schema/CommentExample.pvm")

import java.io.IOException;

import net.sf.JRecord.cgen.def.IWriter;
import net.sf.JRecord.cgen.impl.IoBuilder;

#if (${generateOptions.schemaDefinition.getRecords().size()} == 1)
#else
import ${generateOptions.packageId}.data.Line${generateOptions.schemaDefinition.extensionName}Schema;
#end

import ${generateOptions.packageId}.io.IoBuilder${generateOptions.schemaDefinition.extensionName};
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
import ${generateOptions.packageId}.data.Line${r.extensionName}Pojo;
#*  *##end


/**
 * Write Cobol file using a Cobol Copybook (${generateOptions.schemaDefinition.extensionName}).
 *
 * This Generated program is intended as an example of using JRecord
 * rather than a useful program (that compiles - it wont).
 * You should regard it as a starting point and modify
 * it according to needs
 */
public final class Write${generateOptions.schemaDefinition.extensionName} {


    private String outputFileName = "";
    private String copybookName   = "${generateOptions.getSchemaDefinition().schemaName.getJavaFileName()}";

    
    /**
     * Example of LineReader  classes
     */
    public Write${generateOptions.schemaDefinition.extensionName}() {
        super();

        try {
#if (${generateOptions.schemaDefinition.getRecords().size()} == 1)
#*  *##set( $sep = "        ")
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
            IoBuilder<Line${r.extensionName}Pojo> iob = IoBuilder${generateOptions.schemaDefinition.extensionName}.newIoBuilder(copybookName);
            IWriter<Line${r.extensionName}Pojo> writer = iob.newWriter(outputFileName);
 
            writer.write(create${r.extensionName}(data));
#*  *##end
#else
            IoBuilder<Line${generateOptions.schemaDefinition.extensionName}Schema> iob = IoBuilder${generateOptions.schemaDefinition.extensionName}.newIoBuilder(copybookName);
            IWriter<Line${generateOptions.schemaDefinition.extensionName}Schema> writer = iob.newWriter(outputFileName);
 
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
            writer.write(create${r.extensionName}(data));
#*  *##end
#end

            writer.close();
       } catch (Exception e) {
             System.out.println();

            e.printStackTrace();
        }
    }


  /*
   *   The following code contains sample assignments for every 
   * field in the Cobol File. You should modify the code to suit
   * your needs.
   *   As I do not know where the data is coming from, I have used
   * SourceOfDataForTheCobolFile instead. You should replace this with your
   * class / classes  or remove it as needed.
   *   To put it another way, it time for you to start Coding
   */

#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
    private Line${r.extensionName}Pojo create${r.extensionName}(SourceOfDataForTheCobolFile data)
    throws IOException {

        Line${r.extensionName}Pojo line = new Line${r.extensionName}Pojo();

#*      *##foreach($f in ${r.getFields()})
#*          *##if (! ${f.isArrayItem()})
#*              *##if (${f.getValue()})
#*                  *##if (${f.isPrimitiveNumeric()})
        line.set${f.extensionName}(${f.getValue()});
#*                  *##else
        line.set${f.extensionName}("${f.getValue()}");
#*                  *##end
#*              *##else
        line.set${f.extensionName}(data. ...);
#*              *##end
#*          *##end
#*      *##end

#*      *##foreach($a in ${r.getArrayDetailsList()})
        line.set${a.getFirstElement().extensionName}(${a.getZeroArrayIndex()}, data. ...);
#*      *##end

        return line;
    }

#*  *##end
    public static void main(String[] args) {
        new Write${generateOptions.schemaDefinition.extensionName}();
    }
}

