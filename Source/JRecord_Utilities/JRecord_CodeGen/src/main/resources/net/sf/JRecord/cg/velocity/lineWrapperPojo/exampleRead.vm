package ${packageId};
##
##   Read Example JRecord using Generated class
##
##   Author: Bruce Martin
##
#incl("schema/CommentExample.pvm")
#incl("$std.schema/CommonMacros.vm")

import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.IO.AbstractLineReader;

#IoBldrImport()

#*  *##if (${generateOptions.schemaDefinition.getRecords().size()} > 1)
import ${generateOptions.packageId}.data.FieldNames${generateOptions.schemaDefinition.extensionName};

#*  *##end
#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
import ${generateOptions.packageId}.data.Line${r.extensionName}JR;
#*  *##end


/**
 * Read Cobol file using a Cobol Copybook (${generateOptions.schemaDefinition.extensionName}).
 *
 * This Generated program is intended as an example of using JRecord
 * rather than a useful program (that compiles - it wont).
 * You should regard it as a starting point and modify
 * it according to needs
 */
public final class Read${generateOptions.schemaDefinition.extensionName} {

    private String dataFile     = "${generateOptions.getDataFileName().getJavaFileName()}";
    private String copybookName = "${generateOptions.getSchemaDefinition().schemaName.getJavaFileName()}";

    /**
     * Example of LineReader  classes
     */
    public Read${generateOptions.schemaDefinition.extensionName}() {
        super();

        AbstractLine line;
        int lineNum = 0;

        try {
#incl("schema/DclIOBuilder.pvm")

#*  *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
           Line${r.extensionName}JR line${r.extensionName}JR = new Line${r.extensionName}JR();
#*  *##end

#*  *##if (${generateOptions.schemaDefinition.getRecords().size()} > 1)
#*      *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
           FieldNames${generateOptions.schemaDefinition.extensionName}.Record${r.extensionName} r${r.extensionName} = FieldNames${generateOptions.schemaDefinition.extensionName}.RECORD_${r.constantName};
#*      *##end
#*  *##end

           AbstractLineReader reader = iob.newReader(dataFile);

           while ((line = reader.read()) != null) {
               lineNum += 1;
#*  *##if (${generateOptions.schemaDefinition.getRecords().size()} == 1)
#*      *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
               line${r.extensionName}JR.setLine(line);
               System.out.println(
#*          *##printFieldsWrapper()
                   );
#*          *##if (${generateOptions.getTemplateDtls().getGenerateOption("skel=javaPojo/IDataPojo.vm")})
	           // to get a proper java pojo line, use the asPojo() method:
	           // pojoLine = line${r.extensionName}JR.asPojo();
#*          *##end
#*      *##end
#*  *##else
#*      *##foreach( $r in ${generateOptions.schemaDefinition.getRecords()})
#*          *##if (${r.getRecordSelection()})
#*              *##set ($const = ${generateOptions.getConstantValues()})
               if (
#*              *##set($sp = "")
#genSelect(${r.getRecordSelection()}, $sp)
               )  {

#*          *##else
               if (/* ${r.record.recordName} */) {
#*          *##end
                  line${r.extensionName}JR.setLine(line);
                  System.out.println(
#*          *##printFieldsWrapper()
                  );
               }
#*      *##end
#*  *##end
            }

            reader.close();
        } catch (Exception e) {
            System.out.println("~~> " + lineNum + " " + e);
            System.out.println();

            e.printStackTrace();
        }
    }
 

    public static void main(String[] args) {
        new Read${generateOptions.schemaDefinition.extensionName}();
    }
}

