<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<SkelGenDefinition>
    <LayoutSkeltons>
        <skelton description="Sample Read program" output="&amp;directory./example/Read&amp;suffix..java" template="&amp;template./exampleRead.vm"/>
        <skelton description="Sample Write program" output="&amp;directory./example/Write&amp;suffix..java" template="&amp;template./exampleWrite.vm"/>
        <skelton description="A class to copy to/from the POJO and JRecord wrapper classes" output="&amp;directory./data/Code&amp;suffix..java" template="javaPojo/Code.vm"/>
        <skelton description="Class with the Cobol Fields names defined as final fields" output="&amp;directory./data/FieldNames&amp;suffix..java" template="standard/FieldNames.vm"/>
        <skelton description="Brief description of the generated code" output="Description_&amp;suffix..html" template="&amp;template./Details.htm.vm"/>
    </LayoutSkeltons>
    <RecordSkeltons>
        <skelton description="Interface that describes all the Cobol fields (as get...)" output="&amp;directory./definitions/I&amp;recordSuffix..java" template="javaPojo/IData.vm"/>
        <skelton description="Interface that describes has set... Methods for the Cobol fields" output="&amp;directory./definitions/I&amp;recordSuffix.Upd.java" template="javaPojo/IDataUpdate.vm"/>
        <skelton description="Interface that describes has get.../set... Methods for the Cobol fields" output="&amp;directory./definitions/I&amp;recordSuffix.Pojo.java" template="javaPojo/IDataPojo.vm"/>
        <skelton description="Java POJO class that represents the &quot;Cobol&quot; record" output="&amp;directory./data/Line&amp;recordSuffix.Pojo.java" template="javaPojo/DataPojo.vm"/>
        <skelton description="A &quot;line wrapper&quot; class that provides get.../set... methods for the Cobol fields" output="&amp;directory./data/Line&amp;recordSuffix.JR.java" template="&amp;template./DataJR.vm"/>
    </RecordSkeltons>
</SkelGenDefinition>
