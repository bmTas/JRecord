package codeGen.readWrite;
 /*
  *   Example program for DTAR021.cbl
  *   This class uses the JRecord project (https://sourceforge.net/projects/jrecord/)
  * -------------------------------------------------------------------
  *        
  * *------------- Keep this notice in your final code ---------------
  * *   This code was generated by JRecord projects CodeGen program
  * *            on the: 25 Nov 2017 9:15:7 
  * *     from Copybook: DTAR021.cbl
  * *          Template: standard
  * *             Split: None   
  * * File Organization: FixedWidth   
  * *              Font: cp037
  * *   
  * *    CodeGen Author: Bruce Martin
  * *-----------------------------------------------------------------
  *
  *   This class should be used as an example of reading/writing files
  *   using JRecord. You will need to modify the code to meet your
  *   needs. The Author of CodeGen (Bruce Martin) program takes no 
  *   responsibility for the accuracy of the generated code. 
  *
  *   Good Luck
  *              Bruce Martin
  *
  * ------------------------------------------------------------------
  * v01  CodeGen        25 Nov 2017  Initial version
  *     (Bruce Martin)
  *
  * ------------------------------------------------------------------ 
  */


import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.Common.IFileStructureConstants;
import net.sf.JRecord.Details.AbstractLine;
import net.sf.JRecord.External.CopybookLoader;
import net.sf.JRecord.IO.AbstractLineReader;
import net.sf.JRecord.IO.AbstractLineWriter;
import net.sf.JRecord.def.IO.builders.ICobolIOBuilder;


/**
 * Read Cobol file using a Cobol Copybook (Dtar021).
 *
 * This Generated program is intended as an example of using JRecord
 * rather than a useful program (that compiles - it wont).
 * You should regard it as a starting point and modify
 * it according to needs
 */
public final class ReadDtar021WriteDtar022 {


    /**
     * Example of LineReader  classes
     */
    public ReadDtar021WriteDtar022() {
        super();

        String dataFile        = getFilePath("DTAR020.bin");
        String outputFileName  ="DTAR022.bin";
        String inCopybookName  = getFilePath("DTAR021.cbl");
        String outCopybookName = getFilePath("DTAR022.cbl");

        AbstractLine line;
        int lineNum = 0;

        try {
            ICobolIOBuilder iob = JRecordInterface1.COBOL
                                .newIOBuilder(inCopybookName)
                                   .setFont("cp037")
                                   .setFileOrganization(IFileStructureConstants.IO_FIXED_LENGTH)
                                   .setSplitCopybook(CopybookLoader.SPLIT_NONE)
                                       ;  

            FieldNamesDtar021.RecordDtar021 rDtar021 = FieldNamesDtar021.RECORD_DTAR021;
            FieldNamesDtar022.RecordDtar022 rDtar022 = FieldNamesDtar022.RECORD_DTAR022;
            
            ICobolIOBuilder iobWrite = JRecordInterface1.COBOL
                    .newIOBuilder(outCopybookName)
                       .setFont("cp037")
                       .setFileOrganization(IFileStructureConstants.IO_FIXED_LENGTH)
                       .setSplitCopybook(CopybookLoader.SPLIT_NONE)
                           ;  
            AbstractLineWriter writer = iobWrite.newWriter(outputFileName);
            
            AbstractLineReader reader = iob.newReader(dataFile);
            while ((line = reader.read()) != null) {
            	lineNum += 1;
                AbstractLine dtar022Line = iobWrite.newLine();

                dtar022Line.getFieldValue(rDtar022.keycodeNo).set(line.getFieldValue(rDtar021.keycodeNo).asString());
                dtar022Line.getFieldValue(rDtar022.theDate)  .set(line.getFieldValue(rDtar021.theDate)  .asInt());
                dtar022Line.getFieldValue(rDtar022.deptNo)   .set(line.getFieldValue(rDtar021.deptNo)   .asInt());
                dtar022Line.getFieldValue(rDtar022.qtySold)  .set(line.getFieldValue(rDtar021.qtySold)  .asInt());
                dtar022Line.getFieldValue(rDtar022.salePrice).set(line.getFieldValue(rDtar021.salePrice).asString());

                writer.write(dtar022Line);
            }

            reader.close();
            writer.close();
        } catch (Exception e) {
            System.out.println("~~> " + lineNum + " " + e);
            System.out.println();

            e.printStackTrace();
        }
        
        System.out.println("~~> Written " + lineNum);
    }
    
    private String getFilePath(String name) {
    	return this.getClass().getResource(name).getFile();

    }

    public static void main(String[] args) {
        new ReadDtar021WriteDtar022();
    }
}

