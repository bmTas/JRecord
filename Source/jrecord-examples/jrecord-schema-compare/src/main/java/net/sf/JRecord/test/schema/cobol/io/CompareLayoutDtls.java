package net.sf.JRecord.test.schema.cobol.io;

import net.sf.JRecord.Common.FieldDetail;
import net.sf.JRecord.Details.LayoutDetail;
import net.sf.JRecord.Details.RecordDetail;
import net.sf.JRecord.Types.TypeManager;
import net.sf.JRecord.test.schema.cobol.gen.data.LayoutDtls;
import net.sf.JRecord.test.schema.cobol.gen.data.LineDialectRecordJR;
import net.sf.JRecord.test.schema.cobol.gen.data.LineFieldRecordJR;
import net.sf.JRecord.test.schema.cobol.gen.data.LineSchemaRecordRecordJR;
import net.sf.JRecord.test.schema.cobol.gen.data.RecordDtls;

/**
 * Purpose:  Compare the 'Layout' read from a file against the one
 *          Generated by JRecord.
 *            This is to support testing of JRecord for multiple 
 *          Cobol Copybooks or Xml-Schema's.
 * 
 * @author Bruce Martin
 *
 */
public class CompareLayoutDtls {

	private boolean writtenSchema, writtenRecord;

	/**
	 * Compare a JRecord schema (Layoutdetail) with LayoutDtls
	 * retrieved from a file
	 * 
	 * @param schema JRecord-Schema that has just been generated
	 * @param fileSchema schema read from a file
	 */
	public void compare(LayoutDetail schema, LayoutDtls fileSchema) {
		writtenSchema = false;
		
		LineDialectRecordJR dialectDtls = fileSchema.dialectDtls;
		if (toBoolean(dialectDtls.getHasBinaryFields()) != schema.hasBinaryField()
		||  toBoolean(dialectDtls.getIsBinary()) != schema.isBinary()
		||  dialectDtls.getFileStructure() != schema.getFileStructure()
		||  fileSchema.records.size() != schema.getRecordCount()) {
			printSchemaHeader(fileSchema);
			System.out.println("    Schema Header-  " 
					+ " File Structure: "
						+ dialectDtls.getFileStructure()   + "~" + schema.getFileStructure()
					+ " Has Binary Fields: "
						+ dialectDtls.getHasBinaryFields() + "~" + schema.hasBinaryField()
					+ "    is Binary: "
						+ dialectDtls.getIsBinary()        + "~" + schema.isBinary()
					+ "    Record Counts: " + fileSchema.records.size() + "~" + schema.getRecordCount());
		}
		
		int recordCount = Math.min(fileSchema.records.size(), schema.getRecordCount());
		
		for (int i = 0; i < recordCount; i++) {
			compareRecord(schema, fileSchema, i);
		}
	}
	
	private void compareRecord(LayoutDetail schema, LayoutDtls fileSchema, int recordIdx) {
		writtenRecord = false;
		RecordDetail record = schema.getRecord(recordIdx);
		RecordDtls fileRecord = fileSchema.records.get(recordIdx);
		LineSchemaRecordRecordJR frec = fileRecord.record;
		
		if (! frec.getRecordName().equals(record.getRecordName())
		||    frec.getRecordSchemaType() != record.getRecordType()
		||    frec.getRecordStyle() != record.getRecordStyle()
		||    fileRecord.fields.size() != record.getFieldCount()
		) {
			printRecordHeader(fileSchema, recordIdx, record.getRecordName());
			
			System.out.println("    Type: " + frec.getRecordSchemaType() + "~" + record.getRecordType()
					+ " Style: " + frec.getRecordStyle() + "~" + record.getRecordStyle()
					+ " Record Count: " + fileRecord.fields.size() + "~" + record.getFieldCount()
			);
		}
		
		int minFieldCount = Math.min(fileRecord.fields.size(), record.getFieldCount());
		int updatedType = 0;
		
		for (int i = 0; i < minFieldCount; i++) {
			FieldDetail fld = record.getField(i);
			LineFieldRecordJR fileField = fileRecord.fields.get(i);
					
			
			if (! fileField.getFieldName().equals(fld.getName())) {
				FieldDetail tField = record.getField(fileField.getFieldName());
				if (tField != null) {
					fld = tField;
				}
			}

			boolean typeError = fileField.getFieldType() != fld.getType();
			if (typeError) {
				int shortType = TypeManager.getInstance()
									.getShortType(fileField.getFieldType(), fld.getLen(), fld.getFontName());
				if (shortType == fld.getType()) {
					typeError = false;
					updatedType += 1;
				}
			}
			
			if (! fileField.getFieldName().equals(fld.getName())
			||    typeError
			||    fileField.getFieldPosition() != fld.getPos()
			||    fileField.getFieldLength() != fld.getLen()
			||    fileField.getDecimal() != fld.getDecimal()
			) {
				printRecordHeader(fileSchema, recordIdx, record.getRecordName());
				System.out.println("     " + i + "\t " + fileField.getFieldName() + " ~ " + fld.getName() 
						+ " Type: "    + fileField.getFieldType()      + "~" + fld.getType()
						+ " Pos: "     + fileField.getFieldPosition()  + "~" + fld.getPos()
						+ " Length: "  + fileField.getFieldLength()    + "~" + fld.getLen()
						+ " Decimal: " + fileField.getDecimal()        + "~" + fld.getDecimal()
				);
			}
		}
		if (updatedType > 0) {
			printRecordHeader(fileSchema, recordIdx, record.getRecordName());
			System.out.println("     Warning " + updatedType + " Fields have been changed to 'small' numeric types");
		}
	}
	
	private void printRecordHeader(LayoutDtls fileSchema, int recordIdx, String currName) {
		if (writtenRecord) { return; }
		
		printSchemaHeader(fileSchema);
		System.out.println("  * Record: " + fileSchema.records.get(recordIdx).record.getRecordName() + " - " + currName );
		
		writtenRecord = true;
	}
	
	private void printSchemaHeader(LayoutDtls fileSchema) {
		if (writtenSchema) { return; }
		
		System.out.println();
		System.out.println("* " + fileSchema.copyBookDtls.getCopybookName() + " - Differences Follow");
		writtenSchema = true;
	}

	private boolean toBoolean(String boolVal) {
		return ! "N".equals(boolVal);
	}
}
