package net.sf.JRecord.zTest.cg.pojo.io;

 /*
  * *------------- Suggest keeping this notice in your final code ---------------
  * *   This code was generated by JRecord projects CodeGen program
  * *            on the: 2025/04/24 0:0:0 
  * *     from Copybook: DTAR020
  * *          Template: pojo
  * *             Split: None   
  * * File Organization: FixedWidth   
  * *              Font: cp037
  * *     Generated for: JRecord Version 932  
  * *   
  * *    CodeGen Author: Bruce Martin
  * *-----------------------------------------------------------------
  *
  *   For the most part, this Code should not be changed by hand you should:
  *   * Rerun CodeGen to regenerate it 
  *   * Fix CodeGen and rerun CodeGen
  *   * Use Organise Imports option in Eclipse (or equivalent function in other packages
  *
  *   Please supply any program fixes/enhancements/documentation
  *   back to the JRecord project (https://sourceforge.net/projects/jrecord/)
  *   so other people can benefit !!!
  * 
  *
  *          Bruce Martin (JRecord / CodeGen Author) 
  *
  * ------------------------------------------------------------------
  * v01  CodeGen        2025/04/24  Initial version
  *     (Bruce Martin)
  */

import java.io.InputStream;
import java.io.IOException;
import java.io.Reader;

import net.sf.JRecord.JRecordInterface1;
import net.sf.JRecord.Common.Constants;
import net.sf.JRecord.Common.IFileStructureConstants;
import net.sf.JRecord.External.CopybookLoader;
/** This requires JRecord Version 0.81.5 or later */
import net.sf.JRecord.cgen.impl.io.IoBuilder;
import net.sf.JRecord.def.IO.builders.ICobolIOBuilder;
import net.sf.JRecord.zTest.cg.pojo.data.ConvertDtar020;
import net.sf.JRecord.zTest.cg.pojo.data.LineDtar020Pojo;
import net.sf.cb2xml.def.Cb2xmlConstants;
import net.sf.cb2xml.copybookReader.ICobolCopybookTextSource;
	
/**
 * This class will create IoBuilders for cobol file using the
 * DTAR020 COBOL copybook
 */
public class IoBuilderDtar020  {

   /**
    * Create IoBuilder from a copybook file
    * for COBOL copybook DTAR020
    */
   public static IoBuilder<LineDtar020Pojo> newIoBuilder(String copybookName) {

        return createIoBuilder(updateIoBuilder(
                                       JRecordInterface1.COBOL
                                            .newIOBuilder(copybookName))
                                            .setCopybookFileFormat(Cb2xmlConstants.USE_STANDARD_COLUMNS));
    }
    
   /**
    * Create IoBuilder from a COBOL copybook stream
    * for COBOL copybook (DTAR020)
    */
   public static IoBuilder<LineDtar020Pojo> newIoBuilder(InputStream copybookStream, String copybookName) {

        return createIoBuilder(updateIoBuilder(
                                       JRecordInterface1.COBOL
                                            .newIOBuilder(copybookStream, copybookName))
                                            .setCopybookFileFormat(Cb2xmlConstants.USE_STANDARD_COLUMNS));
   }
   /**
    * Create IoBuilder from a COBOL copybook stream
    * for COBOL copybook (DTAR020)
    */
   public static IoBuilder<LineDtar020Pojo> newIoBuilder(Reader copybookReader, String copybookName) {

        return createIoBuilder(updateIoBuilder(
                                       JRecordInterface1.COBOL
                                            .newIOBuilder(copybookReader, copybookName))
                                            .setCopybookFileFormat(Cb2xmlConstants.USE_STANDARD_COLUMNS));
   }
   /**
    * Create IoBuilder from a COBOL copybook stream
    * for COBOL copybook (DTAR020)
    */
   public static IoBuilder<LineDtar020Pojo> newIoBuilder(ICobolCopybookTextSource cobolCopybookReader) {

        return createIoBuilder(updateIoBuilder(
                                       JRecordInterface1.COBOL
                                            .newIOBuilder(cobolCopybookReader)));
   }
    
   private static IoBuilder<LineDtar020Pojo> createIoBuilder(ICobolIOBuilder iob) {
    
       try {
            /** IoBuilder requires JRecord Version 0.81.5 or later */
           return new IoBuilder<LineDtar020Pojo>(new ConvertDtar020(iob), iob);
       } catch (IOException e) {
           throw new RuntimeException(e);
       }
    }
   
   /**
    * Create IoBuilder from a copybook file
    * for COBOL copybook DTAR020
    */
   public static ConvertDtar020 newPojoConversion(String copybookName) {

        try {
           return new ConvertDtar020(updateIoBuilder(
                                       JRecordInterface1.COBOL
                                            .newIOBuilder(copybookName))
                                            .setCopybookFileFormat(Cb2xmlConstants.USE_STANDARD_COLUMNS));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    
   /**
    * Create IoBuilder from a COBOL copybook stream
    * for COBOL copybook (DTAR020)
    */
   public static ConvertDtar020 newPojoConversion(Reader copybookReader, String copybookName) {
       try {
    	   return new ConvertDtar020(updateIoBuilder(
                                       JRecordInterface1.COBOL
                                            .newIOBuilder(copybookReader, copybookName))
                                            .setCopybookFileFormat(Cb2xmlConstants.USE_STANDARD_COLUMNS));
       } catch (IOException e) {
           throw new RuntimeException(e);
       }
   }
   /**
    * Create IoBuilder from a COBOL copybook stream
    * for COBOL copybook (DTAR020)
    */
   public static ConvertDtar020 newPojoConversion(ICobolCopybookTextSource cobolCopybookReader) {

        try {
           return new ConvertDtar020(updateIoBuilder(
                                       JRecordInterface1.COBOL
                                             .newIOBuilder(cobolCopybookReader)));
        } catch (IOException e) {
           throw new RuntimeException(e);
        }
   }



   private static ICobolIOBuilder updateIoBuilder(ICobolIOBuilder iob) {
    	
        return iob
                                   .setCopybookFileFormat(Cb2xmlConstants.USE_STANDARD_COLUMNS)
                                   .setFont("cp037") 
                                   .setFileOrganization(IFileStructureConstants.IO_FIXED_LENGTH_RECORDS)
                                   .setSplitCopybook(CopybookLoader.SPLIT_NONE)
	      ;
   }
}
