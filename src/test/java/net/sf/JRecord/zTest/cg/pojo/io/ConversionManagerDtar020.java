package net.sf.JRecord.zTest.cg.pojo.io;
 /*
  * *------------- Suggest keeping this notice in your final code ---------------
  * *   This code was generated by JRecord projects CodeGen program
  * *            on the: 2025/04/24 0:0:0 
  * *     from Copybook: DTAR020
  * *          Template: pojo
  * *             Split: None   
  * * File Organization: FixedWidth   
  * *              Font: cp037
  * *     Generated for: JRecord Version 932  
  * *   
  * *    CodeGen Author: Bruce Martin
  * *-----------------------------------------------------------------
  *
  *   For the most part, this Code should not be changed by hand you should:
  *   * Rerun CodeGen to regenerate it 
  *   * Fix CodeGen and rerun CodeGen
  *   * Use Organise Imports option in Eclipse (or equivalent function in other packages
  *
  *   Please supply any program fixes/enhancements/documentation
  *   back to the JRecord project (https://sourceforge.net/projects/jrecord/)
  *   so other people can benefit !!!
  * 
  *
  *          Bruce Martin (JRecord / CodeGen Author) 
  *
  * ------------------------------------------------------------------
  * v01  CodeGen        2025/04/24  Initial version
  *     (Bruce Martin)
  */

import java.io.Reader;
import java.lang.ref.SoftReference;

import net.sf.JRecord.cgen.support.FileCopybookReader;
import net.sf.JRecord.cgen.support.ReaderCopybookReader;
import net.sf.JRecord.zTest.cg.pojo.data.ConvertDtar020;
import net.sf.cb2xml.copybookReader.CopybookColumns;
import net.sf.cb2xml.copybookReader.ICobolCopybookTextSource;

/**
 * This class `manages` loading the Cobol-Conversion class
 * {@link net.sf.JRecord.zTest.cg.pojo.data.ConvertDtar020}
 * for Cobol Message processingf programs
 * 
 * Author Bruce Martin
 */
public class ConversionManagerDtar020 {

	private static SoftReference<ConvertDtar020> commonConvert;

	public static ConvertDtar020 getConversion(String cobolCopybookFileName) {
		ConvertDtar020 tempConversion =  commonConvert == null ? null : commonConvert.get();

		return tempConversion == null
				   ? getConversion(new FileCopybookReader(cobolCopybookFileName)
						 	.setColumns(CopybookColumns.STANDARD_COLUMNS))
				   : tempConversion;
	}
	
	public static ConvertDtar020 getConversion(Reader copybookFileReader, String copybookName) {
		ConvertDtar020 tempConversion =  commonConvert == null ? null : commonConvert.get();

		return tempConversion == null
				   ? getConversion(new ReaderCopybookReader(copybookFileReader, copybookName)
				            .setColumns(CopybookColumns.STANDARD_COLUMNS))
				   : tempConversion;
	}
	
	public static ConvertDtar020 getConversion(ICobolCopybookTextSource cobolCopybook) {
		
		ConvertDtar020 tempConversion =  commonConvert == null ? null : commonConvert.get();
		
		if (tempConversion == null) {
			tempConversion = IoBuilderDtar020.newPojoConversion(cobolCopybook);
			
			commonConvert = new SoftReference<>(tempConversion);
		}

		return tempConversion;
	}
}
